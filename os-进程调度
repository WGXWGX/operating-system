#include <iostream>
using namespace std;
//定义进程
typedef struct pcb{
   // char id;
	int arrive,start,server,finish,time_run;
	//到达时间 服务时间
	int times;
    struct pcb *next;
}PCB;
PCB *ready,*running,*blocked,finished;
int sum_time=0;
int num_time=0;
int daiquan_time=0;
void Insert(PCB *head,PCB *process)
{
    PCB *p=head;
    while(p->next!=NULL)
    {
        p=p->next;
    }
    p->next=process;
    process->next=NULL;
}
PCB *del(PCB *head)
{
    PCB *p=head->next;
 //   while(p)
   // {
        head->next=p->next;
        p->next=NULL;
    //}
    return p;
}
void FCFS(int *Ari_time,int *Ser_time,int num)
{
   // cout<<Ari_time[0]<<"asdsad"<<endl;
    //cout<<Ser_time[0]<<"asdsad"<<endl;
    int i=0,j=0;
    int *Fin_time = new int[num];
    int *T =new int[num];
    double *W = new double[num];
    double Aver_t=0;
    double Aver_w=0;
    int last_fin_t=0;


    for(i=0;i<num;i++)
    {
        //如果到达时间大于当前最终完成时间
        if(Ari_time[i]>last_fin_t)
        {
            Fin_time[i]=Ari_time[i]+Ser_time[i];
        }
        else
        {
            Fin_time[i]=last_fin_t+Ser_time[i];
        }
        last_fin_t=Fin_time[i];
       // cout<<last_fin_t<<"eesed"<<endl;
        T[i]=Fin_time[i]-Ari_time[i];//周转时间
        W[i]=T[i]/(double)Ser_time[i];//带权周转时间  周转时间/服务时间
    }

    cout<<"完成时刻 ";
    for(i=0;i<num;i++)
    {
        cout<<Fin_time[i]<<" ";
    }
    cout<<endl;

    cout<<"周转     ";
    int allWholeTime=0;
    for(i=0;i<num;i++)
    {
        allWholeTime+=T[i];
        cout<<T[i]<<" ";
    }

    cout<<endl;
    Aver_t=allWholeTime/(double)num;
    cout<<"平均周转 ";
    cout<<Aver_t<<endl;

    cout<<"带权周转 ";
    double allWeightWholeTime=0;
    for(i=0;i<num;i++)
    {
        allWeightWholeTime+=W[i];
        cout<<W[i]<<" ";
    }
    cout<<endl;
    Aver_w = allWeightWholeTime/num;
    cout<<"平均带权周转 ";
    cout<<Aver_w<<endl;
    cout<<endl;
}
void SJF(int *Ari_time,int *Ser_time,int num)
{
    int i=0,j=0;
    bool *done=new bool[num];

    int *copyArrivalTime=new int[num];
    for(i=0;i<num;i++)
    {
        copyArrivalTime[i]=Ari_time[i];
    }
    int *copyServiceTime=new int[num];
    for(i=0;i<num;i++)
    {
        copyServiceTime[i]=Ser_time[i];
    }
    for(i=0;i<num;i++)
    {
        done[i]=false;
    }

    int *FinishTime = new int[num];
    int *copyFinishTime=new int[num];
    int *WholeTime=new int[num];
    double *WeightWholeTime = new double[num];
    double AverageWholeTime=0;
    double AverageWeightWholeTime=0;
    int lastFinishTime=0;

    int tempTime=0;
    int tempService=0;
    cout<<endl;

    for(i=0;i<num;i++)
    {
        if(i!=0)
        {
            for(j=i;j<num;j++)
            {
                //cout<<"第"<<i<<"次"<<endl;
                if(copyServiceTime[j]<copyServiceTime[i])
                {
                   // cout<<copyServiceTime[j]<<"in"<<endl;
                    if(copyArrivalTime[j]<lastFinishTime)
                    {
                        //cout<<copyServiceTime[j]<<"in1"<<endl;
                        tempTime=copyArrivalTime[i];
                        tempService=copyServiceTime[i];

                        copyArrivalTime[i]=copyArrivalTime[j];
                        copyServiceTime[i]=copyServiceTime[j];
                        copyArrivalTime[j]=tempTime;
                        copyServiceTime[j]=tempService;
                    }
                }

            }
            for(int k=0;k<num;k++)
            {
                cout<<copyArrivalTime[k]<<" ";
            }
            cout<<endl;

        }
        copyFinishTime[i]=lastFinishTime+copyServiceTime[i];
        lastFinishTime=copyFinishTime[i];
    }
    cout<<endl;

    for(i=0;i<num;i++)
    {
        for(j=0;j<num;j++)
        {
            if(Ari_time[i]==copyArrivalTime[j])
            {
                FinishTime[i]=copyFinishTime[j];
                WholeTime[i]=FinishTime[i]-Ari_time[i];
                WeightWholeTime[i]=WholeTime[i]/(double)Ser_time[i];
            }
        }
    }

    cout<<"完成时刻 ";
    for(i=0;i<num;i++)
    {
        cout<<FinishTime[i]<<" ";
    }
    cout<<endl;

    cout<<"周转      ";
    int allWholeTime=0;
    for(i=0;i<num;i++)
    {
        allWholeTime+=WholeTime[i];
        cout<<WholeTime[i]<<" ";
    }
    cout<<endl;

    AverageWholeTime=allWholeTime/(double)num;
    cout<<"平均周转 "<<AverageWholeTime<<endl;

    cout<<"带权周转 "<<endl;
    double allWeightWholeTime=0;
    for(i=0;i<num;i++)
    {
        allWeightWholeTime+=WeightWholeTime[i];
        cout<<WeightWholeTime[i]<<" ";
    }
    cout<<endl;
    AverageWeightWholeTime=allWeightWholeTime/num;
    cout<<"平均带权周转 "<<AverageWeightWholeTime<<endl;
    cout<<endl;

}
void Times(int num)
{
    //create(num);
	PCB *p,*temp,*copy_p,*head;
	int t,last_fin_t=0;
	int i=0;
	cout<<"请输入时间片：";
	cin>>t;
//	cout<<"out!"<<endl;
	p=ready->next;
	copy_p=ready->next;
	while(copy_p)
	{
		//cout<<p->run<<endl;
		if(p->server==0)       //进程运行结束，插入阻塞队列
		{
			copy_p=copy_p->next;
			temp=del(ready);
			Insert(blocked,temp);
		}
		else if(p->server>t)           //进程运行时间大于时间片，将时间片进行处理，然后插到就绪队列尾
		{
			p->server=p->server-t;
			last_fin_t+=t;
			copy_p=copy_p->next;
			temp=del(ready);
			Insert(ready,temp);
		//	cout<<p->server<<endl;
		}
		else if(p->server<t&&p->server!=0)//进程小于时间片，则将其运行时间置零，并记住结束时间
		{
			p->finish=last_fin_t+p->server;
			last_fin_t=p->finish;
			p->server=0;
			copy_p=copy_p->next;
			temp=del(ready);
			Insert(ready,temp);
		}
		else       //进程运行时间等于时间片
		{
			p->server=0;
			p->finish=last_fin_t+t;
			last_fin_t=p->finish;
			copy_p=copy_p->next;
			temp=del(ready);
			Insert(ready,temp);
		//	del(p,blocked);

		}
		p=copy_p; //copy_p是为了记住p的位置，因为前面有删除结点，防止找不着，所以用pp
		head=ready->next;
		while(p==NULL)   //此循环是为了避免出现队列里只剩一个进程的情况
		{
			if(head==NULL)
				break;
			else
			{
				last_fin_t=last_fin_t+head->server-1;
				//cout<<"last_fin_t";
				head->finish=last_fin_t;
				temp=del(ready);
				Insert(blocked,temp);
				break;
			}

		}
	}
	//输出到达时间
    p=blocked->next;
	cout<<"到达时刻 ";
    while(p!=NULL)
    {
		cout<<p->arrive;
		 cout<<"   ";
         p=p->next;
    }
	 cout<<endl;
	//输出完成时间
	p=blocked->next;
	cout<<"完成时刻 ";
    while(p!=NULL)
    {

         cout<<p->finish;
		 cout<<"   ";
         p=p->next;
    }
	cout<<endl;
    while(p!=NULL)
    {
        cout<<p->finish - p->arrive;
        cout<<"    ";
        p=p->next;
    }

	PCB *rr;
	rr=blocked->next;
	if(rr!=NULL)     //计算平均周转时间
	{
		//cout<<"11111"<<endl;
		sum_time+=rr->finish - rr->arrive;
		num_time+=1;
		daiquan_time+=(rr->finish - rr->arrive)/(rr->time_run);//计算带权周转时间
		rr=rr->next;
	}
	float b,c;
	b=(sum_time/num_time)*1.0;
	cout<<"平均周转时间为："<<b<<endl;
	c=(daiquan_time/num_time)*1.0;
	cout<<"平均带权周转为："<<c<<endl;
}
int main()
{

	ready=new PCB;
    ready->next=NULL;
    blocked=new PCB;
    blocked->next=NULL;
    int num,i=0,j=0,k=0;
	cout<<"*********************进程调度***********************\n"<<endl;
    cout<<"请输入进程的个数 "<<endl;

    cin>>num;
    int *Ari_time=new int[num];
    int *Ser_time=new int[num];
    cout<<"请输入到达时间："<<endl;
    for(i=0;i<num;i++)
    {
        cin>>Ari_time[i];

    }
    cout<<"请输入服务时间："<<endl;
    for(j=0;j<num;j++)
    {
        cin>>Ser_time[j];

    }
   // cout<<Ser_time[0]<<endl;
	for(k=0;k<num;k++)//这里相当于创建进程
    {
		PCB *p=new PCB;
		p->arrive=Ari_time[k];
		p->server=Ser_time[k];
		p->time_run=p->server;
		p->next=NULL;
	//	p=p->next;
		 Insert(ready,p);
    }
    cout<<"*********FCFS 算法***********\n";
    FCFS(Ari_time,Ser_time,num);
    cout<<endl;
    cout<<"*********SJF 算法************";
    SJF(Ari_time,Ser_time,num);
    cout<<"********时间片轮转算法********"<<endl;
    Times(num);
}
