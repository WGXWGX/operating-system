#include"stdio.h"
#include"stdlib.h"
#include"string.h"
#include"time.h"
#include"math.h"
struct Node
{
	char name[10];
	struct PCB *process,*waiting;//占用的进程 等待就绪的头结点
	struct Node *next;//节点的队列
	struct Node *parent;//父节点

};
struct PCB
{
	char name[10];
	int size;
	struct PCB *next;
};
void add(struct PCB *head,struct PCB *process)
{
	struct PCB*tmp=head;
	while(tmp->next!=NULL)
		tmp=tmp->next;
	tmp->next=process;
	process->next=NULL;
}

struct PCB *removeFirst(struct PCB*head)
{
	struct PCB *tmp=head->next;
	if(tmp!=NULL){
		head->next=tmp->next;
		tmp->next=NULL;
	}
	return tmp;
}
struct PCB *remove_process(struct PCB *head,struct PCB *p)
{
	struct PCB *tmp1=head;
	struct PCB *tmp2=head->next;
	while(tmp2!=NULL)
	{
		if(tmp2==p)
		{
			tmp1->next=tmp2->next;
			tmp2->next=NULL;
			return tmp2;
		}
		tmp1=tmp2;
		tmp2=tmp2->next;
	}
	return NULL;
}
struct PCB *ready,*blocked,*running;
struct Node *DCTs,*COCTs,*CHCTs;//设备 控制器 通道
void create_process(char *name,int size)
{
	struct PCB*tmp;
	tmp=(struct PCB*)malloc(sizeof(struct PCB));
	strcpy(tmp->name,name);
	tmp->size=size;
	tmp->next=NULL;
	add(ready,tmp);
	if(running==NULL)
		running=removeFirst(ready);

}

void display_blocked(struct PCB *head)
{
	struct PCB *tmp=head->next;
	while(tmp!=NULL)
	{
		printf("%s",tmp->name);
		tmp=tmp->next;	
	}
}
void display_waiting(struct Node *head)
{
	struct Node *tmp=head->next;
	while(tmp!=NULL)
	{
		display_blocked(tmp->waiting);//waitimg=head
		tmp=tmp->next;
	}
}
void display()
{
	struct PCB*tmp;    //遍历
	printf("running:");
	if(running!=NULL)
		printf("%s",running->name);
	printf("\n");
	printf("ready:");
	tmp=ready->next;
	while(tmp!=NULL){
		printf("%s ",tmp->name);
		tmp=tmp->next;
	}
	printf("\nblocked:");
	display_blocked(blocked);
	display_waiting(CHCTs);
	display_waiting(COCTs);
	display_waiting(DCTs);
	printf("\n");
}

void timeout()
{
	if(running!=NULL){
		add(ready,running);
		running=removeFirst(ready);
	}
}
void block(struct PCB *head,struct PCB *p)
{
	if(p!=NULL){
		add(head,p);
		if(p==running)
		{
		running=removeFirst(ready);
		}
	}
}
//设备管理
int get_child_count(struct Node *node,struct Node *childs_head)
{
	int count=0;
	struct Node *tmp=childs_head->next;
	while(tmp!=NULL)
	{
		if(tmp->parent==node)
			count++;
		tmp=tmp->next;
	}
	return count;
}
struct Node *findByName(char *name,struct Node *head)
{
	struct Node *tmp=head->next;
	while(tmp!=NULL)
	{
		if(strcmp(tmp->name,name)==0)
			return tmp;
		tmp=tmp->next;
	}
	printf("%cERROR:不能找到 %s!\n ",name);
	return NULL;
}
struct  Node *addNode(char *name,struct Node *parent,struct Node *head)
{
	struct Node *tmp=head;
	while(tmp->next!=NULL)
	{
		tmp=tmp->next;
	}
	tmp->next=(struct Node *)malloc(sizeof(struct Node));
	strcpy(tmp->next->name,name);
	tmp->next->next=NULL;
	tmp->next->parent=parent;
	tmp->next->process=NULL;
	tmp->next->waiting=(struct PCB *)malloc(sizeof(struct PCB));
	tmp->next->waiting->next=NULL;
	return tmp->next;
}
void removeNode(char *name,struct Node *head)
{
	struct Node *tmp1=head;
	struct Node *tmp2=head->next;
	while(tmp2!=NULL)
	{
		if(strcmp(tmp2->name,name)==0)
		{
			if(tmp2->process==NULL && tmp2->waiting->next==NULL)
			{
				tmp1->next=tmp2->next;
				free(tmp2);
			}
			else
			printf("%cERROR:不能删除%s ",name);
          	return;
		}
		tmp1=tmp2;
		tmp2=tmp2->next;
	}
	printf("%cERROR:不能找到 %s ",name);
}

void add_devices()
{
	int i;
	char name[10],parent[10];
	while(1)
	{
		printf("1.添加设备\n");
		printf("2.添加控制器\n");
		printf("3.添加通道\n");
		printf("0.返回\n");
		scanf("%d",&i);
		if(i!=0)
		{
			printf("name:");
			scanf("%s",name);
		}
		if(i==1||i==2)
		{
			printf("parent name:");
			scanf("%s",parent);
		}
		switch(i)
		{
		case 1:
			addNode(name,findByName(parent,COCTs),DCTs);
			break;
		case 2:
			addNode(name,findByName(parent,CHCTs),COCTs);
			break;
		case 3:
			addNode(name,NULL,CHCTs);
			break;
		case 0:
			return;
		}
	}
}
void remove_devices()//删除
{
	int i;
	char name[10];
	struct Node *tmp;
	while(1)
	{
		printf("1.删除设备\n");
		printf("2.删除控制器\n");//controller
		printf("3.删除通道\n");// channel
		printf("0.返回\n");
		scanf("%d",&i);
		if(i!=0)
		{
			printf("name:");
			scanf("%s",name);
		}

		switch(i)
		{
		case 1:
			removeNode(name,DCTs);
			break;
		case 2:
			tmp=findByName(name,COCTs);
			if(tmp==NULL)
	    	printf("%cERROR:不能找到 %s ",name);
			else if(get_child_count(tmp,DCTs)>0)	
	             printf("%cERROR:不能删除 %s ",name);
			else
				removeNode(name,COCTs);
			break;
		case 3:
		    tmp=findByName(name,COCTs);
			if(tmp==NULL)
	    	printf("%cERROR:不能找到 %s ",name);
			else if(get_child_count(tmp,COCTs)>0)
	             printf("%cERROR:不能删除 %s ",name);
			else
				removeNode(name,CHCTs);
			break;
		case 0:
			return;
		}
	}

}
void  allocate_channel(struct Node *node,struct PCB *p)
{
	if(p==NULL)
	return;
	if(node->process==NULL)
	{
		node->process=p;
		block(blocked,p);

	}
	else block(node->waiting,p);
}
void  allocate_controller(struct Node *node,struct PCB *p)
{
	if(p==NULL)
		return;
	if(node->process==NULL)
	{
		node->process=p;
		allocate_channel(node->parent,p);

	}
	else block(node->waiting,p);
}
void  allocate_device(struct Node *node,struct PCB *p)
{
	if(p==NULL)
		return;
	if(node->process==NULL)
	{
		node->process=p;
		allocate_controller(node->parent,p);

	}
	else block(node->waiting,p);
}
void allcoate()//分配设备
{
	char name[10];
	struct Node *node;
	if(running==NULL)
		return;
	printf("设备名:");
	scanf("%s",name);
	node=findByName(name,DCTs);
	if(node==NULL)
	{
		return;
	}
	allocate_device(node,running);
}
void release_channel(struct Node *node,struct PCB *p)
{
	if(node->process==p){
		node->process=NULL;
		allocate_channel(node,removeFirst(node->waiting));
		add(ready,remove_process(blocked,p));
			if(running==NULL){
			running=removeFirst(ready);
		}
	}
	else{
		add(ready,remove_process(node->waiting,p));
		if(running==NULL){
			running=removeFirst(ready);
		}
	}
}

void release_controller(struct Node *node,struct PCB *p)
{
	if(node->process==p){
		node->process=NULL;
		allocate_controller(node,removeFirst(node->waiting));
		release_channel(node->parent,p);
	}
	else{
		add(ready,remove_process(node->waiting,p));
		if(running==NULL){
			running=removeFirst(ready);
		}
	}
}


void release()
{
	char name[10];
	struct Node *node;
	struct PCB *p;
	printf("设备名:");//divice name
	scanf("%s",name);
	node=findByName(name,DCTs);
	if(node==NULL || node->process==NULL)
	{
		return;
	}
	p=node->process;
	node->process=NULL;
	allocate_device(node,removeFirst(node->waiting));
	release_controller(node->parent,p);
}
void display_process_status(struct Node *node)
{
	struct PCB *p=node->waiting->next;
	if(node->process!=NULL)
		printf("<--%s",node->process->name);
    while(p!=NULL)
	{
		printf("<--%s",p->name);
		p=p->next;
	}
	printf("\n");

}
void display_status()
{
	struct Node *chct=CHCTs->next,*coct,*dct;
	while(chct!=NULL)
	{
		printf("%s",chct->name);
		display_process_status(chct);
		coct=COCTs->next;
		while(coct!=NULL)
		{
			if(coct->parent==chct)
			{
				printf("\t%s",coct->name);
				display_process_status(coct);
				dct=DCTs->next;
				while(dct!=NULL)
				{
					if(dct->parent==coct)
					{
					printf("\t\t%s",dct->name);
					display_process_status(dct);

					}
					dct=dct->next;
				}
			}
			coct=coct->next;
		}
		chct=chct->next;
	}

}
/菜单
void menu()
{
		printf("---------------欢迎使用设备管理系统-----------\n");
	printf("9:添加设备\n");
	printf("10:删除设备\n");
	printf("11:申请设备\n");
	printf("12:释放设备\n");
	printf("13:显示设备\n");
	printf("0:退出\n");

}

void init()//初始化
{
	struct Node *chct,*coct;
	ready=(struct PCB *)malloc(sizeof(struct PCB));
	ready->next=NULL;
	blocked=(struct PCB *)malloc(sizeof(struct PCB));
	blocked->next=NULL;

	create_process("A",5000);
    create_process("B",5000);
    create_process("C",5000);
    create_process("D",5000);
    create_process("E",5000);
	create_process("F",5000);
	create_process("G",5000);
	create_process("H",5000);
	create_process("I",5000);
	create_process("J",5000);


	DCTs=(struct Node *)malloc(sizeof(struct Node));
	DCTs->next=NULL;      
	COCTs=(struct Node *)malloc(sizeof(struct Node));
	COCTs->next=NULL;
	CHCTs=(struct Node *)malloc(sizeof(struct Node));
	CHCTs->next=NULL;
	chct=addNode("CHCT1",NULL,CHCTs);
	coct=addNode("COCT1",chct,COCTs);
	addNode("K",coct,DCTs);
	addNode("M",coct,DCTs);
	chct=addNode("CHCT2",NULL,CHCTs);
	coct=addNode("COCT2",chct,COCTs);
	addNode("P",coct,DCTs);
	chct=addNode("CHCT3",NULL,CHCTs);
	coct=addNode("COCT3",chct,COCTs);
	addNode("D",coct,DCTs);
}

main()
{
	int i;
	init();
	while(1){
		menu();
		//printf("0:退出,-1:显示菜单:");
		scanf("%d",&i);
		switch(i){
		//case -1:
		
		//	break;
		case 9:
			add_devices();
			break;
		case 10:
			remove_devices();
			break;
		case 11:
			allcoate();
			break;
		case 12:
			release();
			break;
		case 13:
			display_status();
			break;
		case 14:
			display();
			break;
		case 0:
			exit(0);
			break;
		}
	}
}
